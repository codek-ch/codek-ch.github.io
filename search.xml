<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ngrok服务器搭建</title>
    <url>/2023/01/30/ngrok%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装git</span></span><br><span class="line">git yum install git</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装go</span></span><br><span class="line">wget https://dl.google.com/go/go1.14.15.linux-amd64.tar.gz</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除旧版本</span></span><br><span class="line">rm -rf /usr/local/go</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">解压</span></span><br><span class="line">tar -zxvf go1.14.15.linux-amd64.tar.gz -C /usr/local</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置环境变量 在 /etc/profile后面加入</span></span><br><span class="line">echo &quot;export GOROOT=/usr/local/go&quot; &gt;&gt; /etc/profile</span><br><span class="line">echo &quot;export PATH=\$PATH:\$GOROOT/bin&quot; &gt;&gt; /etc/profile</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使环境变量生效</span></span><br><span class="line">source /etc/profile</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看go是否安装正确</span></span><br><span class="line">go version # 打印: go version go1.14.15 linux/amd64</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">go配置国内代理</span></span><br><span class="line">go env -w GOPROXY=https://goproxy.cn,direct</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">go临时配置GO111MODULE=off</span></span><br><span class="line">go env -w GO111MODULE=off</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">export</span> GO111MODULE=off</span></span><br><span class="line"></span><br><span class="line">export NGROK_DOMAIN=&quot;n.huangying.site&quot;</span><br><span class="line">git clone https://gitee.com/OtherCopy/ngrok.git</span><br><span class="line">cd ngrok</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">为域名生成证书</span></span><br><span class="line">openssl genrsa -out rootCA.key 2048</span><br><span class="line">openssl req -x509 -new -nodes -key rootCA.key -subj &quot;/CN=$NGROK_DOMAIN&quot; -days 5000 -out rootCA.pem</span><br><span class="line">openssl genrsa -out server.key 2048</span><br><span class="line">openssl req -new -key server.key -subj &quot;/CN=$NGROK_DOMAIN&quot; -out server.csr</span><br><span class="line">openssl x509 -req -in server.csr -CA rootCA.pem -CAkey rootCA.key -CAcreateserial -out server.crt -days 5000</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">copy生成的证书到指定目录，编译需要</span></span><br><span class="line">\cp -f rootCA.pem assets/client/tls/ngrokroot.crt</span><br><span class="line">\cp -f server.crt assets/server/tls/snakeoil.crt</span><br><span class="line">\cp -f server.key assets/server/tls/snakeoil.key</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">生成客户端配置文件</span></span><br><span class="line">mkdir bin</span><br><span class="line">echo server_addr: &quot;$NGROK_DOMAIN:4443&quot; &gt; bin/ngrok.cfg</span><br><span class="line">echo trust_host_root_certs: false&gt;&gt; bin/ngrok.cfg</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">采用国内gitee镜像，提升编译速度</span></span><br><span class="line">git clone -- https://gitee.com/mirrors/log4go.git src/github.com/alecthomas/log4go</span><br><span class="line">git clone -- https://gitee.com/ngrok-install/websocket.git src/github.com/gorilla/websocket</span><br><span class="line">git clone -- https://gitee.com/ngrok-install/go-vhost.git src/github.com/inconshreveable/go-vhost</span><br><span class="line">git clone -- https://gitee.com/ngrok-install/mousetrap.git src/github.com/inconshreveable/mousetrap</span><br><span class="line">git clone -- https://gitee.com/ngrok-install/go-bindata.git src/github.com/jteeuwen/go-bindata</span><br><span class="line">git clone -- https://gitee.com/mirrors_addons/osext.git src/github.com/kardianos/osext</span><br><span class="line">git clone -- https://gitee.com/ngrok-install/binarydist.git src/github.com/kr/binarydist</span><br><span class="line">git clone -- https://gitee.com/GoLibs/go-runewidth.git src/github.com/mattn/go-runewidth</span><br><span class="line">git clone -- https://gitee.com/ngrok-install/termbox-go.git src/github.com/nsf/termbox-go</span><br><span class="line">git clone -- https://gitee.com/mirrors/go-metrics.git src/github.com/rcrowley/go-metrics</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">linux server</span></span><br><span class="line">GOOS=linux GOARCH=amd64 make release-server</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">linux client</span></span><br><span class="line">GOOS=linux GOARCH=amd64 make release-client</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">window client</span></span><br><span class="line">GOOS=windows GOARCH=amd64 make release-client</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入bin目录，启动ngrok服务端</span></span><br><span class="line">./ngrokd -log=stdout -domain=&quot;n.huangying.site&quot; -httpAddr=&quot;:80&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载客户端和配置文件到自己的电脑上</span></span><br><span class="line">./ngrok -config=./ngrok.cfg -subdomain=seu 8080</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">注册为服务自启动</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">复制文件 ngrokd 到 /opt/ngrok/下</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在 /etc/lib/systemd/system下新建文件ngrokd.service（名字一定要叫xxx.service），写入以下内容</span></span><br><span class="line">[Unit]</span><br><span class="line">Description=ngrokd</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">ExecStart=/opt/ngrok/ngrokd -log=/opt/ngrok/log  -domain=n.huangying.site</span><br><span class="line">ExecStop=/usr/bin/killall ngrokd</span><br><span class="line">Restart=always</span><br><span class="line">RestartSec=10</span><br><span class="line">Type=simple</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重新加载服务</span></span><br><span class="line">systemctl daemon-reload</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动服务</span></span><br><span class="line">systemctl start ngrokd.service</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">关闭服务</span></span><br><span class="line">systemctl stop ngrokd.service</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使服务开机自启动</span></span><br><span class="line">systemctl enable ngrokd.service</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看服务状态</span></span><br><span class="line">systemctl status ngrokd.servcie</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="可能遇到的问题"><a href="#可能遇到的问题" class="headerlink" title="可能遇到的问题"></a>可能遇到的问题</h5><h5 id="1-报错：malformed-module-path-“ngrok”-missing-dot-in-first-path-element"><a href="#1-报错：malformed-module-path-“ngrok”-missing-dot-in-first-path-element" class="headerlink" title="1. 报错：malformed module path “ngrok”: missing dot in first path element"></a>1. 报错：malformed module path “ngrok”: missing dot in first path element</h5><p>修改go环境：go env -w GO111MODULE&#x3D;off 或者 export GO111MODULE&#x3D;off</p>
<h5 id="2-报错：go-get-timeout-超时"><a href="#2-报错：go-get-timeout-超时" class="headerlink" title="2. 报错：go get timeout 超时"></a>2. 报错：go get timeout 超时</h5><p>用国内代理，go env -w GOPROXY&#x3D;<a href="https://links.jianshu.com/go?to=https://goproxy.cn,direct">https://goproxy.cn,direct</a></p>
<h5 id="3-运行客户端报错：you-may-only-specify-one-port-to-tunnel-to-on-the-command-line-got-4"><a href="#3-运行客户端报错：you-may-only-specify-one-port-to-tunnel-to-on-the-command-line-got-4" class="headerlink" title="3. 运行客户端报错：you may only specify one port to tunnel to on the command line got 4"></a>3. 运行客户端报错：you may only specify one port to tunnel to on the command line got 4</h5><p>不要使用PowerShell，使用cmd</p>
<h5 id="4-连接失败-，设置阿里云服务器的安全组，打开4443端口"><a href="#4-连接失败-，设置阿里云服务器的安全组，打开4443端口" class="headerlink" title="4. 连接失败 ，设置阿里云服务器的安全组，打开4443端口"></a>4. 连接失败 ，设置阿里云服务器的安全组，打开4443端口</h5><p>Failed to read message: remote error: tls: bad certificate</p>
<h5 id="5-客户端连接服务端时，显示签名错误"><a href="#5-客户端连接服务端时，显示签名错误" class="headerlink" title="5. 客户端连接服务端时，显示签名错误"></a>5. 客户端连接服务端时，显示签名错误</h5><h6 id="5-1-可能是域名写错了"><a href="#5-1-可能是域名写错了" class="headerlink" title="5.1. 可能是域名写错了"></a>5.1. 可能是域名写错了</h6><h6 id="5-2-go版本过高，降低go版本到1-5以下"><a href="#5-2-go版本过高，降低go版本到1-5以下" class="headerlink" title="5.2. go版本过高，降低go版本到1.5以下"></a>5.2. go版本过高，降低go版本到1.5以下</h6>]]></content>
      <categories>
        <category>服务器</category>
      </categories>
      <tags>
        <tag>服务搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>单一职责原则</title>
    <url>/2023/02/28/%E5%8D%95%E4%B8%80%E8%81%8C%E8%B4%A3%E5%8E%9F%E5%88%99/</url>
    <content><![CDATA[<h3 id="设计模式之禅-单一职责原则"><a href="#设计模式之禅-单一职责原则" class="headerlink" title="设计模式之禅-单一职责原则"></a>设计模式之禅-单一职责原则</h3><blockquote>
<p>在实际代码开发中，单一职责原则通常面向接口编程，而非面向实现类。若要实现类的单一职责会引起类间耦合过高，类的数量增加等问题，人为的增加了设计的复杂性。</p>
</blockquote>
<blockquote>
<p>单一职责原则可面向类、接口、方法使用。</p>
</blockquote>
<blockquote>
<p>单一职责的好处：</p>
<ul>
<li>类的复杂性降低，实现什么职责都有清晰明确的定义；</li>
<li>可读性提高，复杂性降低，那当然可读性提高了；</li>
<li>可维护性提高，可读性提高，那当然更容易维护了；</li>
<li>变更引起的风险降低，变更是必不可少的，如果接口的单一职责做得好，一个接口修改只对相应的实现类有影响，对其他的接口无影响，这对系统的扩展性、维护性都有非常大的帮助。</li>
</ul>
</blockquote>
<blockquote>
<p>单一职责原则提出了一个编写程序的标准，用“职责”或“变化原因”来衡量接口或类设计得是否优良，但是“职责”和“变化原因”都是不可度量的，因项目而异，因环境而异。</p>
<p>原则是死的，人是活的。</p>
</blockquote>
<blockquote>
<p><strong>This is sometimes hard to see</strong></p>
<p>单一职责原则在日常开发中可能会受非常多因素的制约，纯理论地来讲，这个原则是非常优秀的，但是现实有现实的难处。</p>
<p>在开发时做到：接口一定要做到单一职责，类的设计尽量做到只有一个原因引起变化。</p>
</blockquote>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
</search>
